
"""Форматирование строк
Форматирование строк может помочь, например, в таких ситуациях:
    -необходимо подставить значения в строку по определенному шаблону
    -необходимо отформатировать вывод столбцами
    -надо конвертировать числа в двоичный формат

Существует несколько вариантов форматирования строк:
    с оператором % — более старый вариант
    метод format() — относительно новый вариант
    f-строки — новый вариант, который появился в Python 3.6.

Форматирование строк с методом format
"""
# a = 'interface FastEhernet0/{}'.format('1')
# print(a)
# b = ('{}'.format('10.1.1.1'))
# c = ('{}'.format('100'))
# d = ('{}'.format([10, 1, 1, 2]))
# print(d, c, b)

#Выравнивание по правой стороне:
# vlan, mac, intf = ['100', 'add.cc80.700', 'Gi0/1']
# print('{:>15} {:>15} {:>15}'.format(vlan, mac, intf))

#Выравнивание по левой стороне:
# print('{:15} {:15} {:15}'.format(vlan, mac, intf))

#Шаблон для вывода может быть и многострочным:
ip_template = '''
IP address:
{}
'''
print(ip_template.format('10.0.0.0'))

#С помощью форматирования строк можно также влиять на отображение чисел.
#Например, можно указать, сколько цифр после запятой выводить:
# a = ("{:.3f}".format(10.0/3))
# print(a)

#С помощью форматирования строк можно конвертировать числа в двоичный формат:
# a = '{:b} {:b} {:b} {:b}'.format(192,168,100,1)
# print(a)

#При этом по-прежнему можно указывать дополнительные параметры, например, ширину столбца:
# a = '{:8b} {:8b} {:8b} {:8b}'.format(192,168,100,1)
# print(a)

#А также можно указать, что надо дополнить числа нулями, вместо пробелов:
# a = '{:08b} {:08b} {:08b} {:08b}'.format(192,168,100,1)
# print(a)

"""В фигурных скобках можно указывать имена. Это позволяет передавать 
аргументы в любом порядке, а также делает шаблон более понятным:"""
# a = '{ip}/{mask}'.format(mask=24, ip='10.1.1.1')
# print(a)

#Еще одна полезная возможность форматирования строк - указание номера аргумента:
# a = '{1}/{0}'.format(24, '10.1.1.1')
# print(a)

#За счет этого, например, можно избавиться от повторной передачи одних и тех же значений:
# a = '''
# IP address:
# {:<8} {:<8} {:<8} {:<8}
# {:08b} {:08b} {:08b} {:08b}
# '''
# print(a.format(192, 168 ,100, 1, 192, 168 ,100, 1,))

#Указав индексы значений, которые передаются методу format, можно избавиться от дублирования:
# a = '''
# IP address:
# {0:<8} {1:<8} {2:<8} {3:<8}
# {0:08b} {1:08b} {2:08b} {3:08b}'''
# print(a.format(192, 168 ,100, 1,))

"""Форматирование строк с помощью f-строк
Синтаксис
F-строки — это литерал строки с буквой f перед ним. Внутри f-строки в паре 
фигурных скобок указываются имена переменных, которые надо подставить"""

# ip = '10.1.1.1'
# mask = 24
# a = f"ip: {ip}, mask: {mask}"
# print(a)

#Кроме подстановки значений переменных, в фигурных скобках можно писать выражения:

# first_name = 'Willian'
# second_name = 'Shakespeare'
# a = f"{first_name.upper()} {second_name.upper()}"
# print(a) 

#после двоеточия в f-строках можно указывать те же значения, что и при 
#использовании format:

# oct1, oct2, oct3, oct4, = [255, 255, 255, 255]
# b = (f'''
# IP address:
# {oct1:<8} {oct2:<8} {oct3:<8} {oct4:<8}
# {oct1:08b} {oct1:08b} {oct1:08b} {oct1:08b}''')
# print(b)



#Объединение литералов строк

s = ('Test' 'String')
print(s)