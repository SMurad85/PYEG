''' Урок 04 Кортеж Множество

Кортеж (Tuple)
Кортеж в Python это:
    последовательность элементов, которые разделены между собой запятой и заключены в скобки
    неизменяемый упорядоченный тип данных
Грубо говоря, кортеж - это список, который нельзя изменить. То есть, в 
кортеже есть только права на чтение. Это может быть защитой от случайных изменений.

Создать пустой кортеж:'''

# tuple1 = tuple()
# print(tuple1)


'''Кортеж из одного элемента (обратите внимание на запятую):'''

# tuple2 = ('password',)
# print(tuple2)


'''Кортеж из списка:'''
# list_keys = ['hostname', 'location', 'vendor', 'ios', 'ip']
# tuple_keys = tuple(list_keys)
# print(tuple_keys)

'''К объектам в кортеже можно обращаться, как и к объектам списка, по порядковому номеру:'''
# print(tuple_keys[0])

'''Но так как кортеж неизменяем, присвоить новое значение нельзя:'''

'''Функция sorted сортирует элементы кортежа по возрастанию и 
возвращает новый список с отсортированными элементами:'''

# list_keys = ['hostname', 'location', 'vendor', 'ios', 'ip']
# sorted(list_keys)
# print(list_keys)



'''Множество (Set)
Множество - это изменяемый неупорядоченный тип данных. В множестве 
всегда содержатся только уникальные элементы.
Множество в Python - это последовательность элементов, которые 
разделены между собой запятой и заключены в фигурные скобки.
С помощью множества можно легко убрать повторяющиеся элементы:'''

# vlans = [10, 20, 30, 40, 100, 10]
# vlan1 = set(vlans)
# print(vlan1)

'''Метод add() добавляет элемент во множество:'''
# set1 = {10,20,30,40}
# set1.add(50)
# print(set1)

'''Метод discard() позволяет удалять элементы, не выдавая ошибку, если элемента 
в множестве нет:'''
# set2 = {10,20,30,40,50}
# set2.discard(50)
# print(set2)

'''Метод clear() очищает множество:'''
# set3 = {10,20,30,4}
# set3.clear()
# print(set3)


'''Операции с множествами
Множества полезны тем, что с ними можно делать различные операции и находить 
объединение множеств, пересечение и так далее.

Объединение множеств можно получить с помощью метода union() или оператора |:'''
# vlan1 = {10,20,30,50,100}
# vlan2 = {100,101,102,102,200}
# vlan3 = vlan1.union(vlan2)
# vlan4 = vlan1 | vlan2
# print(vlan3)
# print(vlan4)


'''Пересечение множеств можно получить с помощью метода intersection() или оператора &:'''
# vlan1 = {10,20,30,50,100}
# vlan2 = {100,101,102,102,200}
# vlan3 = vlan1.intersection(vlan2)
# vlan4 = vlan1 & vlan2
# print(vlan3)
# print(vlan4)



'''Варианты создания множества

Нельзя создать пустое множество с помощью литерала 
(так как в таком случае это будет не множество, а словарь):'''
# set1 = {}
# type(set1)
# print(set1)

'''Но пустое множество можно создать таким образом'''
# set2 = set()
# type(set2)
# print(set2)

# '''Множество из строки:'''
# set3 = set('long long long long string')
# print(set3)

'''Множество из списка:'''
# set4 = set([10,20,30,10,10,30])
# print(set4)


'''Булевы значения
Булевы значения в Python это две константы True и False.
В Python истинными и ложными значениями считаются не только True и False.
    истинное значение:
        любое ненулевое число
        любая непустая строка
        любой непустой объект
    ложное значение:
        0
        None
        пустая строка
        пустой объект
Остальные истинные и ложные значения, как правило, логически следуют из условия.
Для проверки булевого значения объекта, можно воспользоваться bool:'''

# items = [1, 2, 3]
# empty_list = []
# print(bool(empty_list))
# print(bool(input))



'''Преобразование типов
В Python есть несколько полезных встроенных функций, которые позволяют преобразовать 
данные из одного типа в другой.
int() преобразует строку в int:'''
# a = int("10")
# print(a)

'''С помощью функции int можно преобразовать и число в двоичной записи в десятичную 
(двоичная запись должна быть в виде строки)'''
# b = int("11111111", 2)
# print(b)

'''bin()
Преобразовать десятичное число в двоичный формат можно с помощью bin():'''
# c = bin(10)
# print(c)
# c = bin(255)
# print(c)

'''hex()
Аналогичная функция есть и для преобразования в шестнадцатеричный формат:'''
# d = hex(10)
# print(d)
# d = hex(255)
# print(d)

'''list()
Функция list() преобразует аргумент в список:'''
# f = list("string")
# print(f)
# f = list({1, 2, 3})
# print(f)
# f = list((1, 2, 3, 4))
# print(f)


'''Функция set() преобразует аргумент в множество:'''
# e = set([1,2,3,4,4,4,4,4])
# print(e)
# e = set((1,2,3,4,4,4,4,4))
# print(e)
# e = set('string string')
# print(e)
'''Эта функция очень полезна, когда нужно получить уникальные элементы в 
последовательности.'''

'''tuple()
Функция tuple() преобразует аргумент в кортеж:'''
# r = tuple([1,2,3,4])
# print(r)
# r = tuple({1,2,3,4})
# print(r)
# r = tuple("string")
# print(r)
'''Это может пригодиться в том случае, если нужно получить неизменяемый объект.'''

'''str()
Функция str() преобразует аргумент в строку:'''
# h = str(10)
# print(h)



'''Проверка типов
При преобразовании типов данных могут возникнуть ошибки такого рода:
In [1]: int('a')
------------------------------------------------------
ValueError           Traceback (most recent call last)
<ipython-input-42-b3c3f4515dd4> in <module>()
----> 1 int('a')
ValueError: invalid literal for int() with base 10: 'a'

Ошибка абсолютно логичная. Мы пытаемся преобразовать в десятичный формат строку „a“.
И если тут пример выглядит, возможно, глупым, тем не менее, когда нужно, например, 
пройтись по списку строк и преобразовать в числа те из них, которые содержат числа, 
можно получить такую ошибку.

Чтобы избежать её, было бы хорошо иметь возможность проверить, с чем мы работаем.
isdigit()

В Python такие методы есть. Например, чтобы проверить, состоит ли строка из одних 
цифр, можно использовать метод isdigit():'''

# I = "a".isdigit()
# print(I)
# I = "a10".isdigit()
# print(I)
# I = "10".isdigit()
# print(I)

'''isalpha()
Метод isalpha() позволяет проверить, состоит ли строка из одних букв:'''
# t = "a".isalpha()
# print(t)
# t = "a100".isalpha()
# print(t)
# t = "a--  ".isalpha()
# print(t)
# t = "a ".isalpha()
# print(t)

'''isalnum()
Метод isalnum() позволяет проверить, состоит ли строка из букв или цифр:'''
# l = "a".isalnum()
# print(l)
# l = "a10".isalnum()
# print(l)

'''type()
Иногда, в зависимости от результата, библиотека или функция может выводить 
разные типы объектов. Например, если объект один, возвращается строка, если несколько, 
то возвращается кортеж.
Нам же надо построить ход программы по-разному, в зависимости от того, была 
ли возвращена строка или кортеж.
В этом может помочь функция type():'''
# p = type("string")
# print(p)

# p = type("string") is str
# print(p)

'''Аналогично с кортежем (и другими типами данных):'''
# m = type((1,2,3))
# print(m)
# m = type((1,2,3)) is tuple
# print(m)
# m = type((1,2,3)) is list
# print(m)














